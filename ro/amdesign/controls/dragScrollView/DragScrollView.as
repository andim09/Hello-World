package ro.amdesign.controls.dragScrollView{	import caurina.transitions.Tweener;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.ui.Mouse;		public class DragScrollView extends MovieClip	{		//Mouse clickpoint		private var clickPoint:Point = new Point();				//Flag indicating if is scroller is scrolled		private var _isScrolling = false;				//Flag indication if mouse is down		private var mouseDown:Boolean = false;				//Flag indicating if enabled or not		private var _scrollEnabled:Boolean = false;				public function DragScrollView()		{			super();						//Add ADDED_TO_STAGE listener			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				/**		 * ADDED_TO_STAGE eventhandler		 */		private function onAddedToStage(event:Event):void		{			//Add REMOVED_FROM_STAGE listener			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						//Add stage listeners			stage.addEventListener(Event.RESIZE, onStageResize);			stage.addEventListener(MouseEvent.MOUSE_MOVE, onStageMouseMove);				stage.addEventListener(Event.MOUSE_LEAVE, onStageMouseLeave);						//Add mouse listener			addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);						//Disable cursor for mouseevents			dragCursor.mouseEnabled = false;						//Hide cursor initially			dragCursor.visible = false;						//Add REMOVED_FROM_STAGE listener			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						checkScrollEnabled();		}				/**		 * REMOVED_FROM_STAGE eventhandler		 */		private function onRemovedFromStage(event:Event):void		{			//Remove all eventlisteners			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						stage.removeEventListener(Event.RESIZE, onStageResize);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onStageMouseMove);				stage.removeEventListener(Event.MOUSE_LEAVE, onStageMouseLeave);						removeEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);		}				/**		 * stage MOUSE_LEAVE eventhandler		 */		private function onStageMouseLeave(event:Event):void		{			hideDragCursor();		}				/**		 * MOUSE_OUT eventhandler		 */		private function onMouseOut(event:MouseEvent):void		{			hideDragCursor();		}				/**		 * MOUSE_OVER eventhandler		 */		private function onMouseOver(event:MouseEvent):void		{			showDragCursor();			}				/**		 * Hide the drag cursor		 */		private function hideDragCursor():void		{			Mouse.show();			dragCursor.visible = false;		}				/**		 * Show the drag cursor		 */		private function showDragCursor():void		{			positionDragCursor();			Mouse.hide();						dragCursor.visible = true;		}				/**		 * Posotion the cursor		 */		private function positionDragCursor():void		{			dragCursor.x = mouseX;			dragCursor.y = mouseY;		}				/**		 * stage RESIZE eventhandler		 */		public function onStageResize(event:*):void		{			content.x = 0;			checkScrollEnabled();			scrollMask.width = stage.stageWidth;			trace(content.width);		}				/**		 * Check if scroller has to be enabled or not		 */		public function checkScrollEnabled():void		{			scrollEnabled = content.width > stage.stageWidth;		} 				/**		 * Setter for scrollEnabled property		 */		public function set scrollEnabled (value:Boolean):void		{			_scrollEnabled = value;    						//Add/remove MouseEvent listeners 			if(scrollEnabled){				addEventListener(MouseEvent.MOUSE_DOWN, onScrollerMouseDown);				addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			}else{				removeEventListener(MouseEvent.MOUSE_DOWN, onScrollerMouseDown);				removeEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			}		}				/**		 * Getter for scrollEnabled property		 */		public function get scrollEnabled():Boolean		{			return _scrollEnabled;		}				/**		 * MOUSE_DOWN eventhandler		 */		private function onScrollerMouseDown(event:MouseEvent):void		{			//Set isScrolling flag to true			isScrolling = false;						//Set mouseDown flag to true			mouseDown = true;						//Add stage MOUSE_UP listener			stage.addEventListener(MouseEvent.MOUSE_UP, onStageMouseUp);						//Remove all tweens			Tweener.removeTweens(content);						//Set clickPoint			clickPoint.x = content.mouseX;		}				/**		 * stage MOUSE_UP eventhandler		 */		private function onStageMouseUp(event:MouseEvent):void		{			stage.removeEventListener(MouseEvent.MOUSE_UP, onStageMouseUp);						//Set mouseDown flag to false			mouseDown = false;		}				/**		 * stage MOUSE_MOVE eventhandler		 */		private function onStageMouseMove(event:MouseEvent):void		{			//Position the cursor			positionDragCursor();						if(mouseDown)			{				//Set isScrolling to true				isScrolling = true;								//Calc the contents target position and tween it to that new position				var minX:int = stage.stageWidth - this.width;				var targetX:int = mouseX - clickPoint.x; 				var resultX:int = Math.min(0, Math.max(minX, targetX));				Tweener.removeTweens(content);				Tweener.addTween(content, { x: resultX, time: 1, transition: "easeOutSine", rounded: true, onComplete:function() {					trace(content.x);				}});			}		}				/**		 * Add content to the scroller		 */		public function addContent(object:MovieClip):void		{			content.addChild(object);						checkScrollEnabled();			scrollMask.width = stage.stageWidth;		}				/**		 * Getter for isScrolling property		 */		public function get isScrolling():Boolean		{			return _isScrolling;		}				/**		 * Setter for isScrolling property		 */		public function set isScrolling(value:Boolean):void		{			_isScrolling = value;		}				/**		 * Disable the scroller		 */		public function disable():void		{			hideDragCursor();			mouseEnabled = false;			mouseChildren = false;		}	}}