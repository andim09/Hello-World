package ro.amdesign.controls.dragScrollView{	import caurina.transitions.Tweener;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.ui.Mouse;		public class DragScrollViewVertical extends MovieClip	{		//Mouse clickpoint		private var clickPoint:Point = new Point();				//Flag indicating if is scroller is scrolled		private var _isScrolling = false;				//Flag indication if mouse is down		private var mouseDown:Boolean = false;				//Flag indicating if enabled or not		private var _scrollEnabled:Boolean = false;				//Vars for mouseWheelScroll		private var dragBot:Number;		private var top:Number;		private var sPos:Number;		private var ratio:Number;		private var ctrl:Number;		private var range:Number;				public function DragScrollViewVertical()		{			super();						//Add ADDED_TO_STAGE listener			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				/**		 * ADDED_TO_STAGE eventhandler		 */		private function onAddedToStage(event:Event):void		{						// init vars for scrollbar and mouseWheel event			scroller.alpha = 0;			setScrollerHeight();			//initVarsForMouseWheel();						//Add REMOVED_FROM_STAGE listener			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						//Add stage listeners			stage.addEventListener(Event.RESIZE, onStageResize);			stage.addEventListener(MouseEvent.MOUSE_MOVE, onStageMouseMove);				stage.addEventListener(Event.MOUSE_LEAVE, onStageMouseLeave);						//Add mouse listener			addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);						//Disable cursor for mouseevents			dragCursor.mouseEnabled = false;						//Hide cursor initially			dragCursor.visible = false;						//Add REMOVED_FROM_STAGE listener			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						checkScrollEnabled();					}				private function initVarsForMouseWheel() {						scroller.y = 0;			scrollMask.height = stage.stageHeight;						//set the maximum vertical movement of the scroller			dragBot = (scroller.y + stage.stageHeight) - scroller.height;			top = scroller.y;			ctrl = scroller.y;			range = stage.stageHeight - scroller.height;			//trace(content.height + "||" + stage.stageHeight);			if (content.height <= stage.stageHeight) {				scroller.visible = false;				trace("visible false");				content.removeEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);			} else {				trace("visible true");				scroller.visible = true;				content.addEventListener(MouseEvent.MOUSE_WHEEL,mouseWheelHandler);			}		}				/**		 * REMOVED_FROM_STAGE eventhandler		 */		private function onRemovedFromStage(event:Event):void		{						//Remove all eventlisteners			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						stage.removeEventListener(Event.RESIZE, onStageResize);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onStageMouseMove);				stage.removeEventListener(Event.MOUSE_LEAVE, onStageMouseLeave);						removeEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);		}				public function mouseWheelHandler(event:MouseEvent):void {			if (event.delta < 0) {				if (scroller.y < dragBot) {					scroller.y-=(event.delta*3);					if (scroller.y > dragBot) {						scroller.y = dragBot;											}					startScroll();				}			} else {				if (scroller.y > top) {					scroller.y-=(event.delta*3);					if (scroller.y < top) {						scroller.y = top;					}					startScroll();				}			}		}				public function startScroll():void {			ratio = (content.height - range - scroller.height) / range ;			//trace(ratio)			sPos = (scroller.y * ratio)-ctrl;						Tweener.addTween(content, {y:-sPos, time:0.5, transition:"easeOutExpo"});		}				/**		 * stage MOUSE_LEAVE eventhandler		 */		private function onStageMouseLeave(event:Event):void		{			hideDragCursor();			Tweener.addTween(scroller, {alpha:0, time:1, delay:0.5} );		}				/**		 * MOUSE_OUT eventhandler		 */		private function onMouseOut(event:MouseEvent):void		{			hideDragCursor();		}				/**		 * MOUSE_OVER eventhandler		 */		private function onMouseOver(event:MouseEvent):void		{			showDragCursor();				Tweener.addTween(scroller, {alpha:0.8, time:1 } );		}				/**		 * Hide the drag cursor		 */		private function hideDragCursor():void		{			Mouse.show();			dragCursor.visible = false;		}				/**		 * Show the drag cursor		 */		private function showDragCursor():void		{			positionDragCursor();			//Mouse.hide();						dragCursor.visible = false;		}				/**		 * Posotion the cursor		 */		private function positionDragCursor():void		{			dragCursor.x = mouseX;			dragCursor.y = mouseY;		}				/**		 * stage RESIZE eventhandler		 */		private function setScrollerHeight() { 			scroller.height = stage.stageHeight * (stage.stageHeight / content.height );		}					public function onStageResize(event:*):void		{			setScrollerHeight();			content.y = 0;			initVarsForMouseWheel();			checkScrollEnabled();			//trace(content.height);		}				/**		 * Check if scroller has to be enabled or not		 */		public function checkScrollEnabled():void		{			scrollEnabled = content.height > stage.stageHeight;		} 				/**		 * Setter for scrollEnabled property		 */		public function set scrollEnabled (value:Boolean):void		{			_scrollEnabled = value;    						//Add/remove MouseEvent listeners 			if(scrollEnabled){				this.addEventListener(MouseEvent.MOUSE_DOWN, onScrollerMouseDown);				this.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			}else{				this.removeEventListener(MouseEvent.MOUSE_DOWN, onScrollerMouseDown);				this.removeEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			}		}				/**		 * Getter for scrollEnabled property		 */		public function get scrollEnabled():Boolean		{			return _scrollEnabled;		}				/**		 * MOUSE_DOWN eventhandler		 */		private function onScrollerMouseDown(event:MouseEvent):void		{			//Set isScrolling flag to true			isScrolling = false;						//Set mouseDown flag to true			mouseDown = true;						//Add stage MOUSE_UP listener			stage.addEventListener(MouseEvent.MOUSE_UP, onStageMouseUp);						//Remove all tweens			Tweener.removeTweens(content);						//Set clickPoint			clickPoint.y = content.mouseY;			clickPoint.x = content.mouseX;		}				/**		 * stage MOUSE_UP eventhandler		 */		private function onStageMouseUp(event:MouseEvent):void		{			stage.removeEventListener(MouseEvent.MOUSE_UP, onStageMouseUp);						//Set mouseDown flag to false			mouseDown = false;		}				/**		 * stage MOUSE_MOVE eventhandler		 */		private function onStageMouseMove(event:MouseEvent):void		{			//Position the cursor			positionDragCursor();						if((clickPoint.x-30<= mouseX) && (mouseX<=clickPoint.x+30))			if((mouseDown))			{				//Set isScrolling to true				isScrolling = true;								//Calc the contents target position and tween it to that new position				var minY:int = stage.stageHeight - content.height;				var targetY:int = mouseY - clickPoint.y; 				var resultY:int = Math.min(0, Math.max(minY, targetY));				Tweener.removeTweens(content);				Tweener.addTween(content, { y: resultY, time: 0.5, transition: "easeOutSine", rounded: true, onUpdate:function() {					var maxScrollPx = content.height - stage.stageHeight;					var currentPoz = content.y;					var proc:Number = Math.abs(currentPoz / maxScrollPx);					//trace("proc: " + proc);					if (proc * stage.stageHeight - scroller.height <= 0) {						scroller.y = 0;					} else {						scroller.y  = proc * stage.stageHeight - scroller.height;											}									}});			}		}				/**		 * Add content to the scroller		 */		public function addContent(object:MovieClip):void		{			content.addChild(object);			initVarsForMouseWheel();			scroller.x = content.width;			checkScrollEnabled();			scrollMask.width = stage.stageWidth;			setScrollerHeight();		}				/**		 * Getter for isScrolling property		 */		public function get isScrolling():Boolean		{			return _isScrolling;		}				/**		 * Setter for isScrolling property		 */		public function set isScrolling(value:Boolean):void		{			_isScrolling = value;		}				/**		 * Disable the scroller		 */		public function disable():void		{			hideDragCursor();			mouseEnabled = false;			mouseChildren = false;		}	}}